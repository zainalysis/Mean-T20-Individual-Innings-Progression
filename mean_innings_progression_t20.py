# -*- coding: utf-8 -*-
"""mean innings progression t20

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19g6XGJtNj44JHMFdmx0GPpD3Ou5yE55o
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

import pandas as pd

# Replace the file path with the actual path to your CSV file in Google Drive
file_path = '/content/drive/My Drive/modelpred.csv'
df = pd.read_csv(file_path)

# Display the first few rows of the dataframe
df.head()

# Initialize a dictionary to store the mean runs scored for each ball faced
mean_runs_per_ball = {}

# Get the unique values of the 'cur_bat_bf' column
unique_balls_faced = df['cur_bat_bf'].unique()

# Iterate through each unique value in 'cur_bat_bf'
for ball in unique_balls_faced:
    # Filter the DataFrame for rows where 'cur_bat_bf' equals the current ball value
    filtered_df = df[df['cur_bat_bf'] == ball]

    # Calculate the total runs scored and the number of occurrences
    total_runs = filtered_df['batruns'].sum()
    num_occurrences = len(filtered_df)

    # Calculate the mean runs scored for the current ball value
    mean_runs = total_runs / num_occurrences if num_occurrences != 0 else 0

    # Store the result in the dictionary
    mean_runs_per_ball[ball] = mean_runs

# Convert the dictionary to a DataFrame for better visualization
mean_runs_df = pd.DataFrame(list(mean_runs_per_ball.items()), columns=['Ball Faced', 'Mean Runs'])
# Adjust display settings to show more rows and columns
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)


# Display the resulting DataFrame
print(mean_runs_df)

import pandas as pd
import plotly.express as px

# Filter the DataFrame to include only rows where the batsman is 'Babar Azam'
babar_azam_df = df[df['bat'] == 'Babar Azam']

# Initialize a dictionary to store the mean runs scored for each ball faced by Babar Azam
babar_mean_runs_per_ball = {}

# Get the unique values of the 'cur_bat_bf' column for Babar Azam
unique_balls_faced = babar_azam_df['cur_bat_bf'].unique()

# Iterate through each unique value in 'cur_bat_bf'
for ball in unique_balls_faced:
    # Filter the DataFrame for rows where 'cur_bat_bf' equals the current ball value
    filtered_df = babar_azam_df[babar_azam_df['cur_bat_bf'] == ball]

    # Calculate the total runs scored and the number of occurrences
    total_runs = filtered_df['batruns'].sum()
    num_occurrences = len(filtered_df)

    # Calculate the mean runs scored for the current ball value
    mean_runs = total_runs / num_occurrences if num_occurrences != 0 else 0

    # Store the result in the dictionary
    babar_mean_runs_per_ball[ball] = mean_runs

# Convert the dictionary to a DataFrame for better visualization
babar_mean_runs_df = pd.DataFrame(list(babar_mean_runs_per_ball.items()), columns=['Ball Faced', 'Mean Runs'])

# Sort the DataFrame by 'Ball Faced' in ascending order
babar_mean_runs_df = babar_mean_runs_df.sort_values(by='Ball Faced', ascending=True)

# Plot using Plotly with balls faced on x-axis and mean runs on y-axis
fig = px.line(babar_mean_runs_df, x='Ball Faced', y='Mean Runs', title='Mean Runs per Ball Faced by Babar Azam')

# Show the plot
fig.show()

import pandas as pd
import plotly.express as px

# List of batters you want to include
batters = ['Babar Azam', 'Virat Kohli', 'Nicholas Pooran', 'Andre Russell',
           'Suryakumar Yadav', 'Heinrich Klaasen', 'Travis Head']

# Initialize an empty DataFrame to store the mean runs for each batter
all_batters_mean_runs_df = pd.DataFrame()

# Loop through each batter in the list
for batter in batters:
    # Filter the DataFrame to include only rows where the batsman is the current batter
    batter_df = df[df['bat'] == batter]

    # Initialize a dictionary to store the mean runs scored for each ball faced by the current batter
    batter_mean_runs_per_ball = {}

    # Get the unique values of the 'cur_bat_bf' column for the current batter
    unique_balls_faced = batter_df['cur_bat_bf'].unique()

    # Iterate through each unique value in 'cur_bat_bf'
    for ball in unique_balls_faced:
        # Filter the DataFrame for rows where 'cur_bat_bf' equals the current ball value
        filtered_df = batter_df[batter_df['cur_bat_bf'] == ball]

        # Calculate the total runs scored and the number of occurrences
        total_runs = filtered_df['batruns'].sum()
        num_occurrences = len(filtered_df)

        # Calculate the mean runs scored for the current ball value
        mean_runs = total_runs / num_occurrences if num_occurrences != 0 else 0

        # Store the result in the dictionary
        batter_mean_runs_per_ball[ball] = mean_runs

    # Convert the dictionary to a DataFrame for the current batter
    batter_mean_runs_df = pd.DataFrame(list(batter_mean_runs_per_ball.items()), columns=['Ball Faced', 'Mean Runs'])

    # Add a column for the batter's name
    batter_mean_runs_df['Batter'] = batter

    # Append the current batter's DataFrame to the main DataFrame
    all_batters_mean_runs_df = pd.concat([all_batters_mean_runs_df, batter_mean_runs_df], ignore_index=True)

# Sort the DataFrame by 'Ball Faced' in ascending order
all_batters_mean_runs_df = all_batters_mean_runs_df.sort_values(by='Ball Faced', ascending=True)

# Plot using Plotly with balls faced on x-axis and mean runs on y-axis
fig = px.line(all_batters_mean_runs_df,
              x='Ball Faced',
              y='Mean Runs',
              color='Batter',  # Different lines for each batter
              title='Mean Runs per Ball Faced by Various Batters')

# Show the plot
fig.show()

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# List of batters you want to include
batters = ['Babar Azam', 'Virat Kohli', 'Nicholas Pooran', 'Andre Russell',
           'Suryakumar Yadav', 'Heinrich Klaasen', 'Travis Head']

# Initialize an empty DataFrame to store the mean runs for each batter
all_batters_mean_runs_df = pd.DataFrame()

# Initialize a list to store the data points for annotation
data_points = []

# Loop through each batter in the list
for batter in batters:
    # Filter the DataFrame to include only rows where the batsman is the current batter
    batter_df = df[df['bat'] == batter]

    # Sort by 'cur_bat_bf' to ensure correct cumulative sum
    batter_df = batter_df.sort_values(by='cur_bat_bf')

    # Initialize variables to store cumulative mean runs
    cumulative_mean_runs = 0

    # Initialize a dictionary to store the mean runs scored for each ball faced by the current batter
    batter_mean_runs_per_ball = {}

    # Get the unique values of the 'cur_bat_bf' column for the current batter
    unique_balls_faced = batter_df['cur_bat_bf'].unique()

    # Iterate through each unique value in 'cur_bat_bf'
    for ball in unique_balls_faced:
        # Filter the DataFrame for rows where 'cur_bat_bf' equals the current ball value
        filtered_df = batter_df[batter_df['cur_bat_bf'] == ball]

        # Calculate the total runs scored and the number of occurrences
        total_runs = filtered_df['batruns'].sum()
        num_occurrences = len(filtered_df)

        # Calculate the mean runs scored for the current ball value
        mean_runs = total_runs / num_occurrences if num_occurrences != 0 else 0

        # Add the mean runs to cumulative mean runs
        cumulative_mean_runs += mean_runs

        # Store the result in the dictionary
        batter_mean_runs_per_ball[ball] = mean_runs

        # Add points for specific ball intervals (5, 10, 15, 20 balls)
        if ball in [5, 10, 15, 20]:
            data_points.append({
                'Batter': batter,
                'Ball Faced': ball,
                'Cumulative Mean Runs': cumulative_mean_runs
            })

    # Convert the dictionary to a DataFrame for the current batter
    batter_mean_runs_df = pd.DataFrame(list(batter_mean_runs_per_ball.items()), columns=['Ball Faced', 'Mean Runs'])

    # Add a column for the batter's name
    batter_mean_runs_df['Batter'] = batter

    # Append the current batter's DataFrame to the main DataFrame
    all_batters_mean_runs_df = pd.concat([all_batters_mean_runs_df, batter_mean_runs_df], ignore_index=True)

# Sort the DataFrame by 'Ball Faced' in ascending order
all_batters_mean_runs_df = all_batters_mean_runs_df.sort_values(by='Ball Faced', ascending=True)

# Create a line plot for each batter using Plotly
fig = px.line(all_batters_mean_runs_df,
              x='Ball Faced',
              y='Mean Runs',
              color='Batter',  # Different lines for each batter
              title='Mean Runs per Ball Faced by Various Batters')

# Add cumulative mean run data points at intervals (5, 10, 15, 20 balls)
for point in data_points:
    fig.add_trace(go.Scatter(
        x=[point['Ball Faced']],
        y=[point['Cumulative Mean Runs']],
        mode='markers+text',
        name=f"{point['Batter']} at {point['Ball Faced']} balls",
        text=[f"{point['Cumulative Mean Runs']} mean runs"],
        textposition="top center"
    ))

# Show the plot
fig.show()